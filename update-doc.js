const fs = require("fs");
const { execSync } = require("child_process");

const markdownFile = "EXPLORATION.md";

// Mapeamento manual de tÃ³picos e seus arquivos de teste
const testFiles = [
  { topic: "ValidaÃ§Ã£o de String", testPath: "src/__test__/001.test.ts" },
  { topic: "ValidaÃ§Ã£o de NÃºmeros", testPath: "src/__test__/002.test.ts" },
  { topic: "ValidaÃ§Ã£o de Objetos", testPath: "src/__test__/003.test.ts" },
  { topic: "ValidaÃ§Ã£o de Array", testPath: "src/__test__/004.test.ts" },
  { topic: "ValidaÃ§Ã£o de Array de Objetos", testPath: "src/__test__/005.test.ts" },
  { topic: "ValidaÃ§Ã£o de Enums", testPath: "src/__test__/006.test.ts" },
  { topic: "ValidaÃ§Ã£o Encadeada", testPath: "src/__test__/007.test.ts" },
  { topic: "ValidaÃ§Ã£o de Estruturas Diferentes com Base em uma Chave", testPath: "src/__test__/008.test.ts" },
];

let markdownContent = fs.readFileSync(markdownFile, "utf8");

testFiles.forEach(({ topic, testPath }) => {
  try {
    execSync(`npx jest ${testPath} --silent`, { stdio: "ignore" });
    markdownContent = markdownContent.replace(
      new RegExp(`## .*${topic}.*ðŸš§`, "g"),
      `## ${topic} âœ…`
    );
  } catch {
    markdownContent = markdownContent.replace(
      new RegExp(`## .*${topic}.*âœ…`, "g"),
      `## ${topic} ðŸš§`
    );
  }
});

fs.writeFileSync(markdownFile, markdownContent);
console.log(`Arquivo ${markdownFile} atualizado.`);
